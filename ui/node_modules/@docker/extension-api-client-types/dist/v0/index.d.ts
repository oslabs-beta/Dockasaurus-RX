import type { Backend } from './backend';
import type { ExecResult } from './ExecResult';
export * from './backend';
export * from './ExecResult';
export * from './RequestConfig';
/** The deprecated v0 interface for the Docker Desktop client. */
export interface DockerDesktopClient {
    /**
     * The `window.ddClient.backend` object can be used to communicate with the backend defined in the vm section of
     * the extension metadata.
     * The client is already connected to the backend.
     *
     * @deprecated :warning: It will be removed in a future version. Use {@link DockerDesktopClient.extension} instead.
     */
    readonly backend: Backend | undefined;
    /**
     * Display a toast message of type success.
     *
     * ```typescript
     * window.ddClient.toastSuccess("message");
     * ```
     * @category Toast
     * @deprecated :warning: It will be removed in a future version. Use {@link Toast.success} instead.
     * @param msg The message to display in the toast.
     */
    toastSuccess(msg: string): void;
    /**
     * Display a toast message of type warning.
     *
     * ```typescript
     * window.ddClient.toastWarning("message");
     * ```
     * @category Toast
     * @deprecated :warning: It will be removed in a future version. Use {@link Toast.warning} instead.
     * @param msg The message to display in the toast.
     */
    toastWarning(msg: string): void;
    /**
     * Display a toast message of type error.
     *
     * ```typescript
     * window.ddClient.toastError("message");
     * ```
     * @category Toast
     * @deprecated :warning: It will be removed in a future version. Use {@link Toast.error} instead.
     * @param msg The message to display in the toast.
     */
    toastError(msg: string): void;
    /**
     * Get the list of running containers (same as `docker ps`).
     *
     * By default, this will not list stopped containers.
     * You can use the option `{"all": true}` to list all the running and stopped containers.
     *
     * ```typescript
     * const containers = await window.ddClient.listContainers();
     * ```
     * @category Container
     * @deprecated :warning: It will be removed in a future version. Use {@link Docker.listContainers} instead.
     * @param options (Optional). A JSON like `{
     *   "all": true,
     *   "limit": 10,
     *   "size": true,
     *   "filters": JSON.stringify({ status: ["exited"] }),
     * }`
     * For more information about the different properties see [the Docker API endpoint documentation](https://docs.docker.com/engine/api/v1.41/#operation/ContainerList).
     */
    listContainers(options: never): Promise<unknown>;
    /**
    * Get the list of images
    *
    * ```typescript
    * const images = await window.ddClient.listImages();
    * ```
    * @category Image
    * @deprecated :warning: It will be removed in a future version. Use {@link Docker.listImages} instead.
    * @param options (Optional). A JSON like `{
       "all": true,
       "filters": JSON.stringify({ dangling: ["true"] }),
       "digests": true
    * }`
    *
    * For more information about the different properties see [the Docker API endpoint documentation](https://docs.docker.com/engine/api/v1.41/#tag/Image).
    */
    listImages(options: never): Promise<unknown>;
    /**
     * You can run binaries defined in the host section in the extension metadata.
     *
     * ```typescript
     * window.ddClient.execHostCmd(`cliShippedOnHost xxx`).then((cmdResult: any) => {
     *  console.log(cmdResult);
     * });
     * ```
     * @deprecated :warning: It will be removed in a future version. Use {@link ExtensionCli.exec} instead.
     * @param cmd The command to be executed.
     */
    execHostCmd(cmd: string): Promise<ExecResult>;
    /**
     * Invoke an extension binary on your host and getting the output stream.
     *
     * ```typescript
     * window.ddClient.spawnHostCmd(
     *   `cliShippedOnHost`,
     *   [`arg1`, `arg2`],
     *   (data: any, err: any) => {
     *     console.log(data.stdout, data.stderr);
     *     // Once the command exits we get the status code
     *     if (data.code) {
     *       console.log(data.code);
     *     }
     *   }
     * );
     * ```
     * @deprecated :warning: It will be removed in a future version. Use {@link ExtensionCli.exec} instead.
     * @param cmd The command to be executed.
     * @param args The arguments of the command to execute.
     * @param callback The callback function where to listen from the command output data and errors.
     */
    spawnHostCmd(cmd: string, args: string[], callback: (data: any, error: any) => void): void;
    /**
    * You can also directly execute the docker binary.
    *
    * ```typescript
    * const output = await window.ddClient.execDockerCmd("info");
    * ```
    * @deprecated :warning: It will be removed in a future version. Use {@link DockerCommand.exec} instead.
    * @param cmd The command to execute.
    * @param args The arguments of the command to execute.
    * @returns The result will contain both the standard output and the standard error of the executed command:
    * ```json
    * {
    *   "stderr": "...",
    *   "stdout": "..."
    * }
    * ```
    * For convenience, the command result object also has methods to easily parse it depending on the output format:
  
    * - `output.lines(): string[]` splits output lines.
    * - `output.parseJsonObject(): any` parses a well-formed json output.
    * - `output.parseJsonLines(): any[]` parses each output line as a json object.
    *
    * If the output of the command is too long, or you need to get the output as a stream you can use the
     * spawnDockerCmd function:
    *
    * ```typescript
    * window.ddClient.spawnDockerCmd("logs", ["-f", "..."], (data, error) => {
    *   console.log(data.stdout);
    * });
    * ```
    */
    execDockerCmd(cmd: string, ...args: string[]): Promise<ExecResult>;
    /**
     * @deprecated :warning: It will be removed in a future version. Use {@link DockerCommand.exec} instead.
     */
    spawnDockerCmd(cmd: string, args: string[], callback: (data: any, error: any) => void): void;
    /**
     * Navigate to the containers window in Docker Desktop.
     * ```typescript
     * window.ddClient.navigateToContainers();
     * ```
     * @category Navigation
     * @deprecated :warning: It will be removed in a future version. Use {@link NavigationIntents.viewContainers} instead.
     */
    navigateToContainers(): void;
    /**
     * Navigate to the container window in Docker Desktop.
     * ```typescript
     * await window.ddClient.navigateToContainer(id);
     * ```
     * @category Navigation
     * @deprecated :warning: It will be removed in a future version.
     * @param id The full container id, e.g. `46b57e400d801762e9e115734bf902a2450d89669d85881058a46136520aca28`.
     * You can use the `--no-trunc` flag as part of the `docker ps` command to display the full container id.
     * @returns A promise that fails if the container doesn't exist.
     */
    navigateToContainer(id: string): Promise<any>;
    /**
     * Navigate to the container logs window in Docker Desktop.
     * ```typescript
     * await window.ddClient.navigateToContainerLogs(id);
     * ```
     * @category Navigation
     * @deprecated :warning: It will be removed in a future version.
     * @param id The full container id, e.g. `46b57e400d801762e9e115734bf902a2450d89669d85881058a46136520aca28`.
     * You can use the `--no-trunc` flag as part of the `docker ps` command to display the full container id.
     * @returns A promise that fails if the container doesn't exist.
     */
    navigateToContainerLogs(id: string): Promise<any>;
    /**
     * Navigate to the container inspect window in Docker Desktop.
     * ```typescript
     * await window.ddClient.navigateToContainerInspect(id);
     * ```
     * @category Navigation
     * @deprecated :warning: It will be removed in a future version.
     * @param id The full container id, e.g. `46b57e400d801762e9e115734bf902a2450d89669d85881058a46136520aca28`.
     * You can use the `--no-trunc` flag as part of the `docker ps` command to display the full container id.
     * @returns A promise that fails if the container doesn't exist.
     */
    navigateToContainerInspect(id: string): Promise<any>;
    /**
     * Navigate to the container stats to see the CPU, memory, disk read/write and network I/O usage.
     *
     * ```typescript
     * await window.ddClient.navigateToContainerStats(id);
     * ```
     * @category Navigation
     * @deprecated :warning: It will be removed in a future version.
     * @param id The full container id, e.g. `46b57e400d801762e9e115734bf902a2450d89669d85881058a46136520aca28`.
     * You can use the `--no-trunc` flag as part of the `docker ps` command to display the full container id.
     * @returns A promise that fails if the container doesn't exist.
     */
    navigateToContainerStats(id: string): Promise<any>;
    /**
     * Navigate to the images window in Docker Desktop.
     * ```typescript
     * await window.ddClient.navigateToImages(id);
     * ```
     * @category Navigation
     * @deprecated :warning: It will be removed in a future version. Use {@link NavigationIntents.viewImages} instead.
     */
    navigateToImages(): void;
    /**
     * Navigate to a specific image referenced by `id` and `tag` in Docker Desktop.
     * In this navigation route you can find the image layers, commands, created time and size.
     *
     * ```typescript
     * await window.ddClient.navigateToImage(id, tag);
     * ```
     * @category Navigation
     * @deprecated :warning: It will be removed in a future version. Use {@link NavigationIntents.viewImage} instead.
     * @param id The full image id (including sha), e.g. `sha256:34ab3ae068572f4e85c448b4035e6be5e19cc41f69606535cd4d768a63432673`.
     * @param tag The tag of the image, e.g. `latest`, `0.0.1`, etc.
     * @returns A promise that fails if the container doesn't exist.
     */
    navigateToImage(id: string, tag: string): Promise<any>;
    /**
     * Navigate to the volumes window in Docker Desktop.
     *
     * ```typescript
     * await window.ddClient.navigateToVolumes();
     * ```
     * @category Navigation
     * @deprecated :warning: It will be removed in a future version. Use {@link NavigationIntents.viewVolumes} instead.
     */
    navigateToVolumes(): void;
    /**
     * Navigate to a specific volume in Docker Desktop.
     *
     * ```typescript
     * window.ddClient.navigateToVolume(volume);
     * ```
     * @category Navigation
     * @deprecated :warning: It will be removed in a future version. Use {@link NavigationIntents.viewVolume} instead.
     * @param volume The name of the volume, e.g. `my-volume`.
     */
    navigateToVolume(volume: string): void;
    /**
     * Navigate to the Dev Environments window in Docker Desktop.
     *
     * ```typescript
     * window.ddClient.navigateToDevEnvironments();
     * ```
     * @category Navigation
     * @deprecated :warning: It will be removed in a future version. Use {@link NavigationIntents.viewDevEnvironments} instead.
     */
    navigateToDevEnvironments(): void;
    /**
     * Opens an external URL with the system default browser.
     *
     * ```typescript
     * window.ddClient.openExternal("https://docker.com");
     * ```
     * @deprecated :warning: It will be removed in a future version. Use {@link Host.openExternal} instead.
     * @param url The URL the browser will open (must have the protocol `http` or `https`).
     */
    openExternal(url: string): void;
}
