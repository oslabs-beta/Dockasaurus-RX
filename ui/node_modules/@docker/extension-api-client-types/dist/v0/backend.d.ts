import { ExecResult } from './ExecResult';
import { RequestConfig } from './RequestConfig';
export interface Backend {
    /**
     * Performs an HTTP GET request to a backend service.
     *
     * ```typescript
     * window.ddClient.backend
     *  .get("/some/service")
     *  .then((value: any) => console.log(value));
     * ```
     * @category HTTP
     * @deprecated :warning: It will be removed in a future version. Use {@link HttpService.get} instead.
     * @param url The URL of the backend service.
     */
    get(url: string): Promise<unknown>;
    /**
     * Performs an HTTP POST request to a backend service.
     *
     * ```typescript
     * window.ddClient.backend
     *  .post("/some/service", { ... })
     *  .then((value: any) => console.log(value));
     * ```
     * @category HTTP
     * @deprecated :warning: It will be removed in a future version. Use {@link HttpService.post} instead.
     * @param url The URL of the backend service.
     * @param data The body of the request.
     */
    post(url: string, data: any): Promise<unknown>;
    /**
     * Performs an HTTP PUT request to a backend service.
     *
     * ```typescript
     * window.ddClient.backend
     *  .put("/some/service", { ... })
     *  .then((value: any) => console.log(value));
     * ```
     * @category HTTP
     * @deprecated :warning: It will be removed in a future version. Use {@link HttpService.put} instead.
     * @param url The URL of the backend service.
     * @param data The body of the request.
     */
    put(url: string, data: any): Promise<unknown>;
    /**
     * Performs an HTTP PATCH request to a backend service.
     *
     * ```typescript
     * window.ddClient.backend
     *  .patch("/some/service", { ... })
     *  .then((value: any) => console.log(value));
     * ```
     * @category HTTP
     * @deprecated :warning: It will be removed in a future version. Use {@link HttpService.patch} instead.
     * @param url The URL of the backend service.
     * @param data The body of the request.
     */
    patch(url: string, data: any): Promise<unknown>;
    /**
     * Performs an HTTP DELETE request to a backend service.
     *
     * ```typescript
     * window.ddClient.backend
     *  .delete("/some/service")
     *  .then((value: any) => console.log(value));
     * ```
     * @category HTTP
     * @deprecated :warning: It will be removed in a future version. Use {@link HttpService.delete} instead.
     * @param url The URL of the backend service.
     */
    delete(url: string): Promise<unknown>;
    /**
     * Performs an HTTP HEAD request to a backend service.
     *
     * ```typescript
     * window.ddClient.backend
     *  .head("/some/service")
     *  .then((value: any) => console.log(value));
     * ```
     * @category HTTP
     * @deprecated :warning: It will be removed in a future version. Use {@link HttpService.head} instead.
     * @param url The URL of the backend service.
     */
    head(url: string): Promise<unknown>;
    /**
     * Performs an HTTP request to a backend service.
     *
     * ```typescript
     * window.ddClient.backend
     *  .request({ url: "/url", method: "GET", headers: { 'header-key': 'header-value' }, data: { ... }})
     *  .then((value: any) => console.log(value));
     * ```
     * @category HTTP
     * @deprecated :warning: It will be removed in a future version. Use {@link HttpService.request} instead.
     * @param config The URL of the backend service.
     */
    request(config: RequestConfig): Promise<unknown>;
    /**
     * Executes a command inside a container.
     *
     * ```typescript
     * const output = await window.ddClient.backend.execInContainer(container, cmd);
     *
     * console.log(output);
     * ```
     * @category Container
     * @deprecated :warning: It will be removed in a future version.
     * @param cmd The command to be executed.
     */
    execInContainer(container: string, cmd: string): Promise<ExecResult>;
    /**
     * Executes a command inside the backend container.
     * If your extensions ships with additional binaries that should be run inside the backend container you can use the `execInVMExtension` function.
     *
     * ```typescript
     * const output = await window.ddClient.backend.execInVMExtension(
     *   `cliShippedInTheVm xxx`
     * );
     *
     * console.log(output);
     * ```
     * @category VM
     * @deprecated :warning: It will be removed in a future version. Use {@link ExtensionCli.exec} instead.
     * @param cmd The command to be executed.
     */
    execInVMExtension(cmd: string): Promise<ExecResult>;
    /**
     * Returns a stream from the command executed in the backend container.
     *
     * ```typescript
     * window.ddClient.spawnInVMExtension(
     *   `cmd`,
     *   [`arg1`, `arg2`],
     *   (data: any, err: any) => {
     *     console.log(data.stdout, data.stderr);
     *     // Once the command exits we get the status code
     *     if (data.code) {
     *       console.log(data.code);
     *     }
     *   }
     * );
     * ```
     * @category VM
     * @deprecated :warning: It will be removed in a future version.
     * @param cmd The command to be executed.
     * @param args The arguments of the command to execute.
     * @param callback The callback function where to listen from the command output data and errors.
     */
    spawnInVMExtension(cmd: string, args: string[], callback: (data: any, error: any) => void): void;
}
