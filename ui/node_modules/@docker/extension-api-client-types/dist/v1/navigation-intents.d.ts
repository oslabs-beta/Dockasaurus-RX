/**
 * @category Dashboard
 * @since 0.2.0
 */
export interface NavigationIntents {
    /**
     * Navigate to the containers window in Docker Desktop.
     *
     * ```typescript
     * ddClient.desktopUI.navigate.viewContainers()
     * ```
     * @category Container
     */
    viewContainers(): Promise<void>;
    /**
     * Navigate to the container window in Docker Desktop.
     *
     * ```typescript
     * await ddClient.desktopUI.navigate.viewContainer(id)
     * ```
     * @category Container
     * @param id The full container id, e.g. `46b57e400d801762e9e115734bf902a2450d89669d85881058a46136520aca28`.
     * You can use the `--no-trunc` flag as part of the `docker ps` command to display the full container id.
     * @returns A promise that fails if the container doesn't exist.
     */
    viewContainer(id: string): Promise<void>;
    /**
     * Navigate to the container logs window in Docker Desktop.
     *
     * ```typescript
     * await ddClient.desktopUI.navigate.viewContainerLogs(id)
     * ```
     * @category Container
     * @param id The full container id, e.g. `46b57e400d801762e9e115734bf902a2450d89669d85881058a46136520aca28`.
     * You can use the `--no-trunc` flag as part of the `docker ps` command to display the full container id.
     * @returns A promise that fails if the container doesn't exist.
     */
    viewContainerLogs(id: string): Promise<void>;
    /**
     * Navigate to the container inspect window in Docker Desktop.
     *
     * ```typescript
     * await ddClient.desktopUI.navigate.viewContainerInspect(id)
     * ```
     * @category Container
     * @param id The full container id, e.g. `46b57e400d801762e9e115734bf902a2450d89669d85881058a46136520aca28`.
     * You can use the `--no-trunc` flag as part of the `docker ps` command to display the full container id.
     * @returns A promise that fails if the container doesn't exist.
     */
    viewContainerInspect(id: string): Promise<void>;
    /**
     * Navigate to the container terminal window in Docker Desktop.
     *
     * ```typescript
     * await ddClient.desktopUI.navigate.viewContainerTerminal(id)
     * ```
     * @category Container
     * @param id The full container id, e.g. `46b57e400d801762e9e115734bf902a2450d89669d85881058a46136520aca28`.
     * You can use the `--no-trunc` flag as part of the `docker ps` command to display the full container id.
     * @returns A promise that fails if the container doesn't exist.
     */
    viewContainerTerminal(id: string): Promise<void>;
    /**
     * Navigate to the container stats to see the CPU, memory, disk read/write and network I/O usage.
     *
     * ```typescript
     * await ddClient.desktopUI.navigate.viewContainerStats(id)
     * ```
     * @category Container
     * @param id The full container id, e.g. `46b57e400d801762e9e115734bf902a2450d89669d85881058a46136520aca28`.
     * You can use the `--no-trunc` flag as part of the `docker ps` command to display the full container id.
     * @returns A promise that fails if the container doesn't exist.
     */
    viewContainerStats(id: string): Promise<void>;
    /**
     * Navigate to the images window in Docker Desktop.
     *
     * ```typescript
     * await ddClient.desktopUI.navigate.viewImages()
     * ```
     * @category Images
     */
    viewImages(): Promise<void>;
    /**
     * Navigate to a specific image referenced by `id` and `tag` in Docker Desktop.
     * In this navigation route you can find the image layers, commands, created time and size.
     *
     * ```typescript
     * await ddClient.desktopUI.navigate.viewImage(id, tag)
     * ```
     * @category Images
     * @param id The full image id (including sha), e.g. `sha256:34ab3ae068572f4e85c448b4035e6be5e19cc41f69606535cd4d768a63432673`.
     * @param tag The tag of the image, e.g. `latest`, `0.0.1`, etc.
     * @returns A promise that fails if the image doesn't exist.
     */
    viewImage(id: string, tag: string): Promise<void>;
    /**
     * Navigate to the volumes window in Docker Desktop.
     *
     * ```typescript
     * ddClient.desktopUI.navigate.viewVolumes()
     * ```
     * @category Volume
     */
    viewVolumes(): Promise<void>;
    /**
     * Navigate to a specific volume in Docker Desktop.
     *
     * ```typescript
     * await ddClient.desktopUI.navigate.viewVolume(volume)
     * ```
     * @category Volume
     * @param volume The name of the volume, e.g. `my-volume`.
     */
    viewVolume(volume: string): Promise<void>;
    /**
     * Navigate to the Dev Environments window in Docker Desktop.
     *
     * ```typescript
     * ddClient.desktopUI.navigate.viewDevEnvironments()
     * ```
     */
    viewDevEnvironments(): Promise<void>;
}
