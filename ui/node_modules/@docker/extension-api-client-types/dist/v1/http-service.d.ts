/**
 * @since 0.2.0
 */
export interface HttpService {
    /**
     * Performs an HTTP GET request to a backend service.
     *
     * ```typescript
     * ddClient.extension.vm.service
     *  .get("/some/service")
     *  .then((value: any) => console.log(value)
     * ```
     * @param url The URL of the backend service.
     */
    get(url: string): Promise<unknown>;
    /**
     * Performs an HTTP POST request to a backend service.
     *
     * ```typescript
     * ddClient.extension.vm.service
     *  .post("/some/service", { ... })
     *  .then((value: any) => console.log(value));
     * ```
     * @param url The URL of the backend service.
     * @param data The body of the request.
     */
    post(url: string, data: any): Promise<unknown>;
    /**
     * Performs an HTTP PUT request to a backend service.
     *
     * ```typescript
     * ddClient.extension.vm.service
     *  .put("/some/service", { ... })
     *  .then((value: any) => console.log(value));
     * ```
     * @param url The URL of the backend service.
     * @param data The body of the request.
     */
    put(url: string, data: any): Promise<unknown>;
    /**
     * Performs an HTTP PATCH request to a backend service.
     *
     * ```typescript
     * ddClient.extension.vm.service
     *  .patch("/some/service", { ... })
     *  .then((value: any) => console.log(value));
     * ```
     * @param url The URL of the backend service.
     * @param data The body of the request.
     */
    patch(url: string, data: any): Promise<unknown>;
    /**
     * Performs an HTTP DELETE request to a backend service.
     *
     * ```typescript
     * ddClient.extension.vm.service
     *  .delete("/some/service")
     *  .then((value: any) => console.log(value));
     * ```
     * @param url The URL of the backend service.
     */
    delete(url: string): Promise<unknown>;
    /**
     * Performs an HTTP HEAD request to a backend service.
     *
     * ```typescript
     * ddClient.extension.vm.service
     *  .head("/some/service")
     *  .then((value: any) => console.log(value));
     * ```
     * @param url The URL of the backend service.
     */
    head(url: string): Promise<unknown>;
    /**
     * Performs an HTTP request to a backend service.
     *
     * ```typescript
     * ddClient.extension.vm.service
     *  .request({ url: "/url", method: "GET", headers: { 'header-key': 'header-value' }, data: { ... }})
     *  .then((value: any) => console.log(value));
     * ```
     * @param config The URL of the backend service.
     */
    request(config: RequestConfig): Promise<unknown>;
}
/**
 * @since 0.2.0
 */
export interface RequestConfig {
    readonly url: string;
    readonly method: string;
    readonly headers: Record<string, string>;
    readonly data: any;
}
/**
 * Error thrown when an HTTP response is received with a status code that falls
 * out to the range of 2xx.
 * @since 0.2.0
 */
export interface ServiceError {
    name: string;
    message: string;
    statusCode: number;
}
